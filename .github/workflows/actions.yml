name: Spring Boot CI/CD Workflow

on:
  pull_request:
    branches:
      - release-*
      - main
  push:
    branches:
      - develop
      - release-*
      - main
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to promote'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # # Step 0: Set Env variables
      # - name: Set ENV variables
      #   run: |
      #     BRANCH_NAME="${GITHUB_REF##*/}"
      #     REPO_NAME="${GITHUB_REPOSITORY##*/}"
      #     #echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV
      #   env:
      #     DOCKER_REG: ${{ vars.AWS_ACC_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.AWS_ECR_DOCKER }}
      #     HELM_REG: ${{ vars.AWS_ACC_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.AWS_ECR_HELM }}
      #     AWS_ACCOUNT_ID: ${{vars.AWS_ACC_ID}}
      #     AWS_REGION: ${{vars.AWS_REGION}}
      #     REPO_NAME: $(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
      #     #REPO_NAME: ${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}

      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK for Spring Boot
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Build the Spring Boot application
      - name: Build with Maven
        run: mvn clean package -DskipTests -f rbnk/pom.xml

      # Step 4: Run tests (optional)
      - name: Run tests
        run: mvn test -f rbnk/pom.xml 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 2: Set up repository name and branch name
      - name: Set up repository and branch name
        run: |
          REPO_NAME="${GITHUB_REPOSITORY##*/}"         # Extract repo name (owner/repo -> repo)
          BRANCH_NAME="${GITHUB_REF##*/}"              # Extract branch name (refs/heads/branch -> branch)
          echo "Repository Name: $REPO_NAME"
          echo "Branch Name: $BRANCH_NAME"
          echo "DOCKER_TAG=$REPO_NAME-$BRANCH_NAME" >> $GITHUB_ENV  # Set Docker tag in the environment variable
    
      # Step 5: Build Docker image
      - name: Build Docker image
        run: |
          echo "Repository Name: $REPO_NAME"
          echo "Branch Name: $BRANCH_NAME"
          docker build -t $DOCKER_TAG .

      # Step 6: Push Docker image (if needed)
      - name: Push Docker image to Docker Hub
        run: |
          docker tag $REPO_NAME:$BRANCH_NAME-${GITHUB_SHA} $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME:$BRANCH_NAME 
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME:$BRANCH_NAME

  promote:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Merge Release Branch to Production
      - name: Merge Release to Production
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch --all
          git checkout main
          git merge ${{ github.ref }} -m "Promoting release to production"
          git push origin main

      # Step 3: Tag Production with Release Tag
      - name: Tag Production
        run: |
          git fetch --all
          git checkout main
          git tag -a ${{ github.event.inputs.tag }} -m "Release ${{ github.event.inputs.tag }}"
          git push origin ${{ github.event.inputs.tag }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release-')

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install Helm
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # Step 3: Deploy using Helm
      - name: Deploy to Kubernetes
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          helm upgrade --install $REPO_NAME ./helm-chart \
            --set image.repository=${{ env.DOCKER_REG }}/${{ env.REPO_NAME }} \
            --set image.tag=${{ github.sha }}
